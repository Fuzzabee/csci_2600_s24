Correct Code
	Conforms to some Specification

	Precondition		- Conditions holding before execution
	Postcondition		- Conditions must hold after code execution (WRT precondition)

	Specification 		- Contract between a function and its caller
						- Caller must obey preconditions
						- Function "promises" postcondition if precondition holds
						- Type signature is also a contract
							- int sum(int[] arr, int len)
								- Precondition: arguments are an array of ints and an int
								- Postcondition: Result is an int

	Forward Reasoning	- Given a precondition, does postcondition hold?
							- Verify code works correctly
							- Does the code produce output that matches postcondition?

							// Precondition: x is even && x >= 0 
							x = x + 3;		// x is odd and x >= 3
							y = 2x;			// y is even and y >= 6
							x = 5;			// x = 5
							// What is the postcondition?
							// x == 5 && y % 4 == 2 && y >= 6

							// Precondition: x0 > y0
							z = x;			// z0 == x0 && z0 > y0 && x0 > y0
							x = y;			// x1 == y0 && z0 > x1 && z0 > y0	
							y = z;			// y1 == z0 && z0 > x1 && y1 > x1
							// What is the postcondition?
							// y == z && x == y0 && z = x0

	Backward Reasoning	- Given a postcondition, what is proper precondition?
							- Verify code works correctly
							- What input caused an error?

							// What is the precondition?
							// 2(x + 3) > 5 ==> 2x + 6 > 5 ==> 2x > -1 ==> x > -1/2 ==> x > 0 (iff x is int)
							x = x + 3;		// 2(x + 3) > 5
							y = 2x;			// 2x > 5
							x = 5;			// y > 5
							// Postcondition: y > x

	Forward vs Backward
		Reasoning		- Forward reasoning may seem more intuitive, just simulates code
							- Introduces facts that might be irrelevant
							- Takes long to prove task or realize task is hopeless
							- We want to find the weakest precondition "wp(code, Q)"
						- Backward reasoning is usually more helpful
							- Given a specific goal, shows what MUST hold beforehand to achieve goal
							- Given an error, gives input that exposes error
							- Strongest postcondition guarantees as much as we can

	Loop Invariants		- Computing weakest precondition for loops is, in general, a hard problem
						- We assume we can find an INVARIANT for the loop
							- Something that gives us information about the loop and can be rleied upon to be true before and
							  after each execution of the loop
						- If we knew how many iterations, we could unroll the loop
						- Two things to prove
							- It computes correct values (Partial Correctness)
								- Postcondition holds on loop exit
							- It terminates (not infinite)
							- Total correctness = Partial correctness + Loop termination

	Hoare Logic			- Formal framework for reasoning about code
							- Mechanizes the process of reasoning about code
						- Hoare Triple: {P} code {Q}
							- P and Q are logical statements about program values, and code is program code
							- "{P} code {Q}" means "If program code is started in a state satisfying P, if it terminates,
							   it will terminate in a state satisfying Q"
							- If hoare triple is false, provide a counter example
							- We can substitute a stronger precondition and the triple can still be true.
								- Usually want weakest precondition
								- Requires less of client code
							- We can substitute a weaker postcondition and the triple can still be true
								- Usually want strongest postcondition
								- Guarantees more to the client code

							{ x>0 } x++ { x>1 } is TRUE
							{ x>0 } x++ { x>-1 } is TRUE
							{ x>=0 } x++ { x>1 } is FALSE, x == 0 ==> x == 1 {Fails x>1}

						- Notation for weakest precondition:
							- wp("x=expression;", {Q} = {Q'})
								- wp = Weakest precondition
								- wp(code) is unique
								- Weakest precondition is the minimal input conditions that guarantee the postcondition
								- T --> U (T implies U) means T is stronger than U
								- Logical simplications are the same Q
									- { x > -1 } = { x >= 0}

							Which is stronger? ( '-->' means implies )
							y > 0 && y == 0 		or 		x > 0 && y >= 0 		(Left, y == 0 --> y >= 0)
							0 <= x <= 10			or 		0 <= x <= 1 			(Right, 0 <= x <= 1 --> 0 <= x <= 10)
							x == 5 && y % 4 == 2 	or 		x = 5 && y % 2 = 0 		(Left, y % 4 == 2 --> y % 2 == 0)

							Ex. (Slide 46)
							Consider x = x + 1 and the postcondition x > 0
							x > 0 is a valid precondition
								{x > 0} x = x + 1 {x > 0} TRUE
							x > -1 is also valid precondition
								{x > -1} x = x + 1 {x > 0} TRUE
							x > -1 is weaker than x > 0
								{x > 0} --> {x > -1}
							x > -1 is the weakest precondition
								wp(x = x + 1, x > 0) = x > -1
									CODE 		Q 		Q'

							Ex. (Slide 50)
							// Precondition = ???
							// wp("x = 0;", x > -1) = True, therefore, doesn't need a precondition, always True
							x = 0;
							// Postcondition for x = 0; same as
							// Precondition for y = x + 1;
							// wp("y = x + 1;", y > 0) = x > -1
							y = x + 1;
							// Postcondition: y > 0

							Ex. (Slide 53)
							// Precondition: ???
							// wp("x = x + 1", x + y > 1) = x + 1 + y > 1 = x + y > 0
							x = x + 1;
							// wp("y = x + y", y > 1) = x + y > 1
							y = x + y;
							// Postcondition: y > 1

							Ex. (Slide 59)
							// Precondition: ???
							// (x != 0 && x > 0) || (x == 0 && 0 > -1) = (x > 0) || (x == 0 && TRUE) =
							// x > 0 || x == 0 = x >= 0
							z = 0;
							// (x != 0 && x > 0) || (x == 0 && z > -1)
							if (x != 0) {
								// wp{"z = x" z > 0} = x > 0
								z = x;
								// wp{"}", z > 0} = z > 0
							} else {
								// wp{"z = z + 1" z > 0} = z + 1 > 0 = z > -1
								z = z + 1;
								// wp{"}", z > 0} = z > 0
							}
							// Postcondition: z > 0

							Ex. (Slide 61) (x IS INTEGER)
							// Precondition: ???
							// (x < 5 && x * x >= 9) || (x >= 5 && x >= 8) = (x < 5 && abs(x) >= 3) || (x >= 5) =
							// x <= -3 || x == 3 || x == 4 || x >= 8
							if (x < 5) {
								// wp{"x = x * x", x >= 0} = x * x >= 9
								x = x * x;
								// wp{"}", x >= 0} = x >= 9
							} else {
								// wp{"x = x + 1", x >= 0} = x + 1 >= 0 = x >= 8
								x = x + 1;
								// wp{"}", x >= 0} = x >= 9
							}
							// Postcondition: x >= 9

							- Starting with a postcondition, what is the weakest precondition that makes the postcondition true?
								- What must be true beforehand to make the postcondition true
								- Weakest preconditions yield the strongest specifications for computation

							Let the following be true:
								P --> Q 	Q --> R 	S --> T 	T --> U
								{ Q } code { T }

								Which of the following are true?

								{ P } code { T }	TRUE, Stronger precondition
								{ R } code { T }	FALSE, Weaker precondition
								{ Q } code { S }	FALSE, Stronger postcondition
								{ Q } code { U }	TRUE, Weaker postcondition	
